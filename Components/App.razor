<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <!-- CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="@Assets["Blazor.styles.css"]" />
    <link rel="stylesheet" href="@Assets["app.css"]" />

    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <HeadOutlet />

</head>
<component type="typeof(App)" render-mode="ServerInteractive" />

<body>
    <Routes />

    <!-- 🟢 All JavaScript goes at the END of body -->
    <script src="_framework/blazor.web.js"></script>
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet.heat/dist/leaflet-heat.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/heatmap.js/2.0.0/heatmap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        window.drawHeatmap = function (parameter) {
            console.log("drawHeatmap called");
            const mapEl = document.getElementById('map');
            if (!mapEl) {
                console.error("Map element with id 'map' not found.");
                return;
            }

            // Remove previous map instance if exists
            if (window._heatmapMap) {
                window._heatmapMap.remove();
                window._heatmapMap = null;
            }

            // Prepare heatmap data: [lat, lng, intensity]
            const addressPoints = Array.isArray(parameter)
                ? parameter
                    .filter(item => item.latitude && item.longitude && item.totalLitterPerCamera)
                    .map(item => [
                        Number(item.latitude),
                        Number(item.longitude),
                        Number(item.totalLitterPerCamera)
                    ])
                : [];

            if (addressPoints.length === 0) {
                console.warn("No valid heatmap data provided.");
                return;
            }

            // Find the max value for normalization
            const maxValue = Math.max(...addressPoints.map(p => p[2]), 1);

            // Center map on average of points, fallback to Breda center
            let center = [51.58843277555672, 4.776001205701836];
            if (addressPoints.length > 0) {
                const avgLat = addressPoints.reduce((sum, p) => sum + p[0], 0) / addressPoints.length;
                const avgLng = addressPoints.reduce((sum, p) => sum + p[1], 0) / addressPoints.length;
                center = [avgLat, avgLng];
            }

            // Create map
            window._heatmapMap = L.map('map', { zoomControl: true, attributionControl: true }).setView(center, 13);

            // Add tile layer
            L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; OpenStreetMap contributors'
            }).addTo(window._heatmapMap);

            // Add heat layer
            L.heatLayer(addressPoints, {
                radius: 80, // Increased radius for more visibility when zoomed out
                blur: 40,   // Increased blur for smoother appearance
                maxZoom: 8, // Lower maxZoom so heatmap is visible at wider zooms
                max: maxValue
            }).addTo(window._heatmapMap);

            // Optional: Fit bounds to data
            const latLngs = addressPoints.map(p => [p[0], p[1]]);
            if (latLngs.length > 1) {
                window._heatmapMap.fitBounds(latLngs, { padding: [30, 30] });
            }
        };

        window.removeHeatmap = function () {
            console.log("removeHeatmap called");
            const mapEl = document.getElementById('map');
            if (!mapEl) {
                console.error("Map element with id 'map' not found.");
                return;
            }

            // Remove map instance if exists
            if (window._heatmapMap) {
                window._heatmapMap.remove();
                window._heatmapMap = null;
            }
        };
    </script>
</body>

</html>
