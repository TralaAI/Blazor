@page "/ai-predictions"
@using Blazor.Interfaces;
@using ApexCharts
@rendermode InteractiveServer
@inject IJSRuntime JS
@inject IBackendService _backendService;

<div class="page-container">

    <!-- Middle: Left/Right split -->
    <div class="middle-section">
        <div class="left-panel">
            <h3>AI Output</h3>
                <ApexChart TItem="LitterData" Title="Afvalverdeling per Soort">
                    <ApexPointSeries TItem="LitterData"
                                    Items="LitterItems"
                                    Name="Aantal"
                                    XValue="@(e => e.Type)"
                                    YValue="@(e => e.Count)"
                                    SeriesType="SeriesType.Bar" />
                </ApexChart>
        </div>
        <div class="right-panel">
            <h3>Voorspellingsgrafiek</h3>
            <ApexChart TItem="PieData"
                       Title="Voorbeeld Data Pie Chart">

                <ApexPointSeries TItem="PieData"
                                 Items="pieData"
                                 Name="Waarde"
                                 SeriesType="SeriesType.Pie"
                                 XValue="@(e => e.Label)"
                                 YValue="@(e => e.Value)" />
            </ApexChart>
        </div>
    </div>

    <!-- Heatmap section (verplaatst) -->
    <div class="top-section">
        <h3>Heatmap</h3>
        <div id="heatmapContainer" class="heatmap-box">
            <img src="images/Bredakaart.png" alt="Map of Breda" class="heatmap-background" />
        </div>
        <button class="btn btn-primary mt-3" @onclick="DrawHeatmap">Draw Heatmap</button>
    </div>

    <!-- Bottom: Top/Bottom split in the middle -->
    <div class="bottom-section">
        <h3>Extra Informatie</h3>
        <div class="top-bottom-split">
            <div class="top-inner">
                <div class="placeholder">[Extra boven]</div>
            </div>
            <div class="bottom-inner">
                <div class="placeholder">[Extra onder]</div>
            </div>
        </div>
    </div>

</div>

<style>
    .page-container {
        display: flex;
        flex-direction: column;
        height: 100vh;
        background-color: #f0f2f5;
        padding: 1rem;
        gap: 1rem;
        box-sizing: border-box;
    }

    .top-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .middle-section {
        flex: 3;
        display: flex;
        gap: 1rem;
    }

    .left-panel,
    .right-panel {
        flex: 2;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .bottom-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-bottom-split {
        flex: 2;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-inner,
    .bottom-inner {
        flex: 2;
        border-radius: 7px;
    }

    h3 {
        color: #0078d4;
        margin-bottom: 0.5rem;
    }

    .placeholder {
        height: 70%;
        width: 100%;
        border: 2px dashed #cccccc;
        border-radius: 8px;
        background-color: #fafafa;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888888;
    }

        .heatmap-box {
    position: relative;
    height: 300px;
    width: 100%;
    overflow: hidden;
    }

    .heatmap-background {
    position: absolute;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
    }


    @@media (max-width: 768px) {
        .middle-section {
            flex-direction: column;
        }
    }
</style>

@code {
        private List<PieData> pieData = new()
    {
        new PieData { Label = "Rest", Value = 120 },
        new PieData { Label = "GFT", Value = 200 },
        new PieData { Label = "plastic", Value = 150 },
        new PieData { Label = "Papier", Value = 90 }
    };

    public class PieData
    {
        public string Label { get; set; }
        public decimal Value { get; set; }
    }

        private List<LitterData> LitterItems { get; set; }

    protected override void OnInitialized()
    {
        // ✏️ Pas deze waarden gerust aan:
        LitterItems = new List<LitterData>
        {
            new LitterData
            {
                Type = "Glas",
                Count = 1
            },
            // Als je meer wil testen, voeg je hieronder extra regels toe
            // new LitterData { Type = "Plastic", Count = 5 },
        };
    }

    public class LitterData
    {
        public string Type { get; set; }
        public int Count { get; set; }
    }


        protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Waiting 500ms before calling JS...");
            await Task.Delay(500); // <-- gives JS time to initialize
            await JS.InvokeVoidAsync("heatmapInterop.drawMap");
        }
    }

    private async Task DrawHeatmap()
    {
        await JS.InvokeVoidAsync("heatmapInterop.drawMap");
    }
}
