@page "/ai-predictions"
@rendermode InteractiveServer
@using Blazor.Interfaces
@using Blazor.Models
@using System.Linq
@using ApexCharts
@inject ILitterService _litterService;
@inject IJSRuntime JS;


<div class="page-container">

    <!-- Top: AI Output Bar graph -->
    <div class="top-section">
        <h3>AI Output</h3>

        <!-- Form + button in one horizontal line -->
        <div class="d-flex align-items-end gap-3 mb-3 flex-wrap">
            <!-- Number input -->
            <div class="d-flex align-items-center gap-2">
                <label for="daysInput" class="form-label mb-0">Aantal dagen (1–14):</label>
                <input id="daysInput" type="number" class="form-control w-auto" min="1" max="14" @bind="selectedDays" />
            </div>

            <!-- Camera dropdown -->
            <div class="d-flex align-items-center gap-2">
                <label for="cameraSelect" class="form-label mb-0">Locatie:</label>
                <select id="cameraSelect" class="form-select w-auto" @bind="selectedCameraId">
                    @foreach (var cam in cameraOptions)
                    {
                        <option value="@cam.Id">@cam.Location</option>
                    }
                </select>
            </div>

            <!-- Confirm button -->
            <button class="btn btn-primary" @onclick="ApplyFilters" disabled="@isLoading">
                @(isLoading ? "Laden..." : "Toepassen")
            </button>
        </div>

        <p><b>Bovenstaande formulieren geven je de mogelijkheid een voorspelling op te vragen van een AI-model op een
                gekozen camera locatie.</b></p>

        @if (isLoading || PlasticItems is null || PaperItems is null || MetalItems is null || GlassItems is null ||
                OrganicItems is null)
        {
            <div class="loading-state d-flex flex-column align-items-center justify-content-center" style="height: 400px;">

                <span class="loader mb-2"></span>
                <span>AI voorspellingen worden geladen...</span>
            </div>
        }
        else
        {
            <ApexChart @ref="chart" TItem="LitterData" Title="Afval per Type per Dag" Height="400">
                <ApexPointSeries TItem="LitterData" Items="PlasticItems" Name="Plastic" XValue="@(e => e.Date)"
                    YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
                <ApexPointSeries TItem="LitterData" Items="PaperItems" Name="Paper" XValue="@(e => e.Date)"
                    YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
                <ApexPointSeries TItem="LitterData" Items="MetalItems" Name="Metal" XValue="@(e => e.Date)"
                    YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
                <ApexPointSeries TItem="LitterData" Items="GlassItems" Name="Glass" XValue="@(e => e.Date)"
                    YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
                <ApexPointSeries TItem="LitterData" Items="OrganicItems" Name="Organic" XValue="@(e => e.Date)"
                    YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
            </ApexChart>
        }
    </div>

    <!-- Middle: Pie Chart + Heatmap-->
    <div class="middle-section">
        <div class="left-panel">
            <h3>Pie-Chart</h3>
            <p><b>Verdeling de afvaltypes op locatie @locatie in de komende @(appliedselectedDays == 1 ? "dag." : $"{appliedselectedDays} dagen.")</b></p>
            @if (isLoading || pieData is null)
            {
                <div class="d-flex flex-column align-items-center justify-content-center" style="height: 500px;">
                    <span class="loader mb-2"></span>
                    <span>Pie chart wordt geladen...</span>
                </div>
            }
            else
            {
                <ApexChart @ref="pieChart" TItem="PieData"
                    Title="Verdeling van Afvaltypes" Height="500">
                    <ApexPointSeries TItem="PieData" Items="pieData" Name="Waarde" SeriesType="SeriesType.Pie"
                        XValue="@(e => e.Label)" YValue="@(e => (decimal)e.Value)" />
                </ApexChart>
            }
        </div>
        <div class="right-panel">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em">
                <h3 style="margin: 0;">Heatmap</h3>
                @* <button class="heatmap-btn" @onclick="DrawHeatmapNew" disabled="@isLoading">
                    @(isLoading ? "Loading..." : "Draw Heatmap")
                </button> *@
            </div>
            <p><b>Concentratie van de voorspelde afval komende  @(appliedselectedDays == 1 ? "dag" : $"{appliedselectedDays} dagen") in Breda.</b></p>
            <div class="page-container">
                <div class="heatmap-container">
                    <div id="map" class="heatmap-map">
                        @if (isLoading || heatmapItems is null)
                        {
                            <div class="d-flex flex-column align-items-center justify-content-center" style="height: 100%;">
                                <span class="loader mb-2"></span>
                                <span>Heatmap wordt geladen...</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="CameraTable">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Camera</th>
                            <th>Voorspelde hoeveelheid</th>
                        </tr>
                    </thead>
                    <tbody>

                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Bottom: Extra Informatie Hier moet de tabel komen -->
    <div class="bottom-section">
        <h3>Extra Informatie</h3>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Datum</th>
                        <th>Afvaltype</th>
                        <th>Aantal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in LitterItems)
                    {
                        <tr>
                            <td>@item.Date.ToString("dd-MM-yyyy")</td>
                            <td>@item.Type</td>
                            <td>@item.Count</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<style>
    .heatmap-map {
        width: 100%;
        height: 400px;
        border-radius: 0.75rem;
        border: 1px solid #e2e8f0;
        box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
        background: #e0e7ef;
        position: relative;
        overflow: hidden;
    }

    .page-container {
        display: flex;
        flex-direction: column;
        height: 100%;
        padding: 1rem;
        gap: 1rem;
        box-sizing: border-box;
    }

    .top-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .middle-section {
        flex: 3;
        display: flex;
        gap: 1rem;
    }

    .left-panel,
    .right-panel {
        flex: 2;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .bottom-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-bottom-split {
        flex: 2;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-inner,
    .bottom-inner {
        flex: 2;
        border-radius: 7px;
    }

    h3 {
        color: #0078d4;
        margin-bottom: 0.5rem;
    }

    .placeholder {
        height: 70%;
        width: 100%;
        border: 2px dashed #cccccc;
        border-radius: 8px;
        background-color: #fafafa;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888888;
    }

    .heatmap-box {
        position: relative;
        width: 100%;
        aspect-ratio: 3 / 2;
        max-width: 100%;
        overflow: hidden;
    }


    .heatmap-background {
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: contain;
        z-index: 0;
    }

    .heatmap-btn {
        padding: 0.75rem 2rem;
        font-size: 1rem;
        font-weight: 600;
        color: #fff;
        background: linear-gradient(90deg, #2563eb 0%, #38bdf8 100%);
        border: none;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: background 0.2s;
    }

    .heatmap-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }


    @@media (max-width: 768px) {
        .middle-section {
            flex-direction: column;
        }
    }
</style>

@code {
    // Default aantal dagen
    private int selectedDays = 3;
    private int appliedselectedDays = 3;
    private int[] daysOptions = new[] { 1, 3, 7, 14 };
    private int selectedCameraId = 1;
    private List<Camera> cameraOptions = new();
    private string locatie = "Avans Lovensdijkstraat";

    private List<PieData> pieData = new();
    public class PieData
    {
        public required string Label { get; set; }
        public double Value { get; set; }
    }
    // Wordt gebruikt voor de bar chart bovenaan de pagina
    private List<LitterData> LitterItems = new();
    private List<LitterData> PlasticItems = new();
    private List<LitterData> PaperItems = new();
    private List<LitterData> MetalItems = new();
    private List<LitterData> GlassItems = new();
    private List<LitterData> OrganicItems = new();
    private List<HeatmapData> heatmapItems = new();
    private bool _clientRendered;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        var cameraResponse = await _litterService.GetCamerasAsync();
        if (cameraResponse is null || !cameraResponse.Any())
            return; // Error handling: No cameras found; Show an error message to user

        cameraOptions = cameraResponse;
        await MakePredictionAsync();
        await GetHeatmapData();
        isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_clientRendered)
        {
            _clientRendered = true;
            await MakePredictionAsync();
            await GetHeatmapData();
            await DrawHeatmapNew();
            isLoading = false;
            StateHasChanged();
        }
    }

    // De datatype voor de barchart deffinieren
    public class LitterData
    {
        public DateOnly Date { get; set; }
        public required string Type { get; set; }
        public double Count { get; set; }
    }

    // Days select button on click
    private ApexChart<LitterData>? chart;
    private ApexChart<PieData>? pieChart;

    // Verandering in filters
    private async Task ApplyFilters()
    {
        isLoading = true;
        var predictionResponse = await _litterService.PredictAsync(selectedDays, selectedCameraId);
        await MakePredictionAsync();
        if (chart is not null)
            await chart.RenderAsync();
        if (pieChart is not null)
            await pieChart.RenderAsync();
        await DrawHeatmapNew();

        appliedselectedDays = selectedDays;
        locatie = cameraOptions.FirstOrDefault(c => c.Id == selectedCameraId)?.Location ?? "Onbekende locatie";
        isLoading = false;
    }

    private async Task DrawHeatmapNew()
    {
        isLoading = true;
        StateHasChanged();
        await JS.InvokeVoidAsync("drawHeatmap", heatmapItems);
        isLoading = false;
        StateHasChanged();
    }

    private async Task GetHeatmapData()
    {
        var cameras = await _litterService.GetCamerasAsync();
        if (cameras is not null)
        {
            foreach (var camera in cameras)
            {
                var cameraPredictions = await _litterService.PredictAsync(selectedDays, camera.Id);
                double totalPrediction = 0;
                if (cameraPredictions is not null)
                {
                    foreach (var dailyPrediction in cameraPredictions)
                    {
                        totalPrediction += dailyPrediction.Predictions.Plastic;
                        totalPrediction += dailyPrediction.Predictions.Paper;
                        totalPrediction += dailyPrediction.Predictions.Metal;
                        totalPrediction += dailyPrediction.Predictions.Glass;
                        totalPrediction += dailyPrediction.Predictions.Organic;
                    }
                }
                var item = new HeatmapData
                {
                    TotalLitterPerCamera = totalPrediction,
                    Latitude = camera.Latitude,
                    Longitude = camera.Longitude,
                };
                heatmapItems.Add(item);
            }
        }
    }

    private async Task MakePredictionAsync()
    {
        isLoading = true;
        // Voorbeeld van het maken van een voorspelling
        var predictionResponse = await _litterService.PredictAsync(selectedDays, selectedCameraId);
        if (predictionResponse is null || !predictionResponse.Any() || predictionResponse.Count != selectedDays)
        {
            Console.WriteLine("Geen of incorrecte data ontvangen van de backend.");
            return;
        }
        else
        {
            var newLitterItems = new List<LitterData>();
            foreach (var day in predictionResponse)
            {
                Console.WriteLine("Probeert data op te halen");
                newLitterItems.Add(new LitterData
                {
                    Date = DateOnly.FromDateTime(day.Date),
                    Type = "plastic",
                    Count =
                day.Predictions.Plastic
                });
                newLitterItems.Add(new LitterData
                {
                    Date = DateOnly.FromDateTime(day.Date),
                    Type = "paper",
                    Count =
                day.Predictions.Paper
                });
                newLitterItems.Add(new LitterData
                {
                    Date = DateOnly.FromDateTime(day.Date),
                    Type = "metal",
                    Count =
                day.Predictions.Metal
                });
                newLitterItems.Add(new LitterData
                {
                    Date = DateOnly.FromDateTime(day.Date),
                    Type = "glass",
                    Count =
                day.Predictions.Glass
                });
                newLitterItems.Add(new LitterData
                {
                    Date = DateOnly.FromDateTime(day.Date),
                    Type = "organic",
                    Count =
                day.Predictions.Organic
                });
            }
            LitterItems = newLitterItems;
            PlasticItems = LitterItems.Where(x => x.Type == "plastic").ToList();
            PaperItems = LitterItems.Where(x => x.Type == "paper").ToList();
            MetalItems = LitterItems.Where(x => x.Type == "metal").ToList();
            GlassItems = LitterItems.Where(x => x.Type == "glass").ToList();
            OrganicItems = LitterItems.Where(x => x.Type == "organic").ToList();
            pieData = LitterItems
            .GroupBy(item => item.Type)
            .Select(group => new PieData
            {
                Label = group.Key,
                Value = group.Sum(item => item.Count)
            })
            .ToList();
        }

        StateHasChanged();
        isLoading = false;
    }
}