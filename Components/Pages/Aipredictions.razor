@page "/ai-predictions"
@rendermode InteractiveServer
@using Blazor.Interfaces
@using Blazor.Models
@using System.Linq
@using ApexCharts
@inject IBackendService _backendService;
@inject IJSRuntime JS;

<div class="page-container">
    
    <!-- Top: AI Output Bar graph -->
    <div class="top-section">
    <h3>AI Output</h3>

    <!-- Form + button in one horizontal line -->
    <div class="d-flex align-items-end gap-3 mb-3 flex-wrap">
        <!-- Number input -->
        <div class="d-flex align-items-center gap-2">
            <label for="daysInput" class="form-label mb-0">Aantal dagen (1–14):</label>
            <input id="daysInput" type="number" class="form-control w-auto" min="1" max="14" @bind="selectedDays" />
        </div>

        <!-- Camera dropdown -->
        <div class="d-flex align-items-center gap-2">
            <label for="cameraSelect" class="form-label mb-0">Camera:</label>
            <select id="cameraSelect" class="form-select w-auto" @bind="selectedCamera">
                @foreach (var cam in cameraOptions)
                {
                    <option value="@cam">@cam</option>
                }
            </select>
        </div>

        <!-- Confirm button -->
        <button class="btn btn-primary" @onclick="ApplyFilters">Toepassen</button>
    </div>

    <p><b>Bovenstaande formulieren geven je de mogelijkheid een voorspelling op te vragen van een AI-model op een gekozen camera locatie.</b></p>

    <ApexChart TItem="LitterData" Title="Afval per Type per Dag" Height="300">
        <ApexPointSeries TItem="LitterData" Items="PlasticItems" Name="Plastic" XValue="@(e => e.Date)" YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
        <ApexPointSeries TItem="LitterData" Items="PaperItems" Name="Paper" XValue="@(e => e.Date)" YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
        <ApexPointSeries TItem="LitterData" Items="MetalItems" Name="Metal" XValue="@(e => e.Date)" YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
        <ApexPointSeries TItem="LitterData" Items="GlassItems" Name="Glass" XValue="@(e => e.Date)" YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
        <ApexPointSeries TItem="LitterData" Items="OrganicItems" Name="Organic" XValue="@(e => e.Date)" YValue="@(e => (decimal?)e.Count)" SeriesType="SeriesType.Bar" />
    </ApexChart>
</div>

    <!-- Middle: Pie Chart + Heatmap-->
    <div class="middle-section">
        <div class="left-panel">
            <h3>Pie-Chart</h3>
            <ApexChart TItem="PieData" Title="Verdeling van afvaltypes voor de door jouw opgevraagde voorspelling."
                Height="300">
                <ApexPointSeries TItem="PieData" Items="pieData" Name="Waarde" SeriesType="SeriesType.Pie"
                    XValue="@(e => e.Label)" YValue="@(e => e.Value)" />
            </ApexChart>
        </div>
        <div class="right-panel">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1em">
                <h3 style="margin: 0;">Heatmap</h3>
                <button class="btn btn-primary" @onclick="DrawHeatmap">Draw Heatmap</button>
            </div>
            <p><b>Concentratie van de voorspelde afval komende 7 dagen in Breda.</b></p>
            <div id="heatmapContainer" class="heatmap-box">
                <img src="images/Breda_Central_Map.jpg" alt="Map of Breda" class="heatmap-background" />
            </div>
        </div>
    </div>

    <!-- Bottom: Extra Informatie Hier moet de tabel komen -->
    <div class="bottom-section">
        <h3>Extra Informatie</h3>
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Datum</th>
                        <th>Afvaltype</th>
                        <th>Aantal</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in LitterItems)
                    {
                        <tr>
                            <td>@item.Date.ToString("dd-MM-yyyy")</td>
                            <td>@item.Type</td>
                            <td>@item.Count</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


<style>
    .page-container {
        display: flex;
        flex-direction: column;
        padding: 1rem;
        gap: 1rem;
        box-sizing: border-box;
    }

    .top-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .middle-section {
        flex: 3;
        display: flex;
        gap: 1rem;
    }

    .left-panel,
    .right-panel {
        flex: 2;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .bottom-section {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-bottom-split {
        flex: 2;
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .top-inner,
    .bottom-inner {
        flex: 2;
        border-radius: 7px;
    }

    h3 {
        color: #0078d4;
        margin-bottom: 0.5rem;
    }

    .placeholder {
        height: 70%;
        width: 100%;
        border: 2px dashed #cccccc;
        border-radius: 8px;
        background-color: #fafafa;
        display: flex;
        align-items: center;
        justify-content: center;
        color: #888888;
    }

    .heatmap-box {
        position: relative;
        width: 100%;
        aspect-ratio: 3 / 2;
        max-width: 100%;
        overflow: hidden;
    }


    .heatmap-background {
        position: absolute;
        width: 100%;
        height: 100%;
        object-fit: contain;
        z-index: 0;
    }


    @@media (max-width: 768px) {
        .middle-section {
            flex-direction: column;
        }
    }
</style>

@code {
    // Default aantal dagen
    private int selectedDays = 3;
    // Alle mogelijke opties voor dagen
    private int[] daysOptions = new[] { 1, 3, 7, 14 };
    // Default camera
    private string selectedCamera = "Camera 1";
    // Alle mogelijke cameras (misschien nog via api doen)
    private List<string> cameraOptions = new() { "Camera 1", "Camera 2", "Camera 3" };

    // Pie Chart dummydata
    private List<PieData> pieData = new()
{
new PieData { Label = "Rest", Value = 120 },
new PieData { Label = "GFT", Value = 200 },
new PieData { Label = "plastic", Value = 150 },
new PieData { Label = "Papier", Value = 90 }
};

    // De datatype voor de piechart deffinieren
    public class PieData
    {
        public string Label { get; set; }
        public decimal Value { get; set; }
    }
    // Wordt gebruikt voor de bar chart bovenaan de pagina
    private List<LitterData> LitterItems { get; set; }
    private List<LitterData> PlasticItems;
    private List<LitterData> PaperItems;
    private List<LitterData> MetalItems;
    private List<LitterData> GlassItems;
    private List<LitterData> OrganicItems;

    protected override void OnInitialized()
    {
        LitterItems = new List<LitterData>
{
new LitterData { Date = new DateOnly(2025, 6, 18), Type = "plastic", Count = 0.775 },
new LitterData { Date = new DateOnly(2025, 6, 18), Type = "paper", Count = 0.784 },
new LitterData { Date = new DateOnly(2025, 6, 18), Type = "metal", Count = 1.226 },
new LitterData { Date = new DateOnly(2025, 6, 18), Type = "glass", Count = 2.054 },
new LitterData { Date = new DateOnly(2025, 6, 18), Type = "organic", Count = 2.238 },

new LitterData { Date = new DateOnly(2025, 6, 19), Type = "plastic", Count = 1.056 },
new LitterData { Date = new DateOnly(2025, 6, 19), Type = "paper", Count = 0.757 },
new LitterData { Date = new DateOnly(2025, 6, 19), Type = "metal", Count = 1.840 },
new LitterData { Date = new DateOnly(2025, 6, 19), Type = "glass", Count = 1.237 },
new LitterData { Date = new DateOnly(2025, 6, 19), Type = "organic", Count = 2.380 },

new LitterData { Date = new DateOnly(2025, 6, 20), Type = "plastic", Count = 1.894 },
new LitterData { Date = new DateOnly(2025, 6, 20), Type = "paper", Count = 1.449 },
new LitterData { Date = new DateOnly(2025, 6, 20), Type = "metal", Count = 2.284 },
new LitterData { Date = new DateOnly(2025, 6, 20), Type = "glass", Count = 3.364 },
new LitterData { Date = new DateOnly(2025, 6, 20), Type = "organic", Count = 5.203 }
};

        PlasticItems = LitterItems.Where(x => x.Type == "plastic").ToList();
        PaperItems = LitterItems.Where(x => x.Type == "paper").ToList();
        MetalItems = LitterItems.Where(x => x.Type == "metal").ToList();
        GlassItems = LitterItems.Where(x => x.Type == "glass").ToList();
        OrganicItems = LitterItems.Where(x => x.Type == "organic").ToList();
    }


    // De datatype voor de barchart deffinieren
    public class LitterData
    {
        public DateOnly Date { get; set; }
        public string Type { get; set; }
        public double Count { get; set; }
    }


    // Heatmap tekenen bij opstart van de pagina
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Waiting 500ms before calling JS...");
            await Task.Delay(500); // <-- gives JS time to initialize
            await JS.InvokeVoidAsync("heatmapInterop.drawMap");
        }
    }

    // Heatmap tekenen met knop
    private async Task DrawHeatmap()
    {
        await JS.InvokeVoidAsync("heatmapInterop.drawMap");
    }

    // Days select button on click

    // Verandering in filters
    private void ApplyFilters()
    {
        // Hier doe je de filtering van data
        Console.WriteLine($"Toepassen: {selectedDays} dagen en {selectedCamera}");
    }

    private async Task GetDataFromBackend()
    {
        // Voorbeeld van het ophalen van data van de backend
        var filter = new LitterFilterDto { };
        var tempLitterItems = await _backendService.GetLittersAsync(filter);
        if (tempLitterItems is null || !tempLitterItems.Any())
        {
            Console.WriteLine("Geen data ontvangen van de backend.");
            return;
        }

        @* TODO Add retrieving data from backend service *@
    }
}
