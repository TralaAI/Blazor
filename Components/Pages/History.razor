@page "/history"
@rendermode InteractiveServer
@using ApexCharts
@using Blazor.Models
@using Blazor.Interfaces
@inject ILitterService _litterService

<div class="page-container">
    <div class="donut">
    @if(totalLitterPerCamera is null || totalLitterPerCamera.Count == 0)
    {
        <p>Er zijn nog geen camera's gevonden.</p>
    }
    else
    {
    <ApexChart TItem="TotalLitterPerCamera" Title="Totaal gedetecteerd afval per camera" Height="400">

    <ApexPointSeries TItem="TotalLitterPerCamera"
                Items="totalLitterPerCamera"
                SeriesType="SeriesType.Donut"
                Name="Total Litter Per Camera"
                XValue="@(e => e.Location)"
                YValue="@(e => e.Amount)"/>
    </ApexChart>    
    }

    </div>
</div>

<style>
    .donut{
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }
</style>

@code {
    private class TotalLitterPerCamera
    {
        public required string Location {get; set;}
        public required int Amount { get; set; }
    }

    List<Camera> cameras = new();
    List<TotalLitterPerCamera> totalLitterPerCamera = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCamerasAsync();
        await GetLitterPerCameraAsync();
    }

    private async Task GetCamerasAsync()
    {
        var cameraResult = await _litterService.GetCamerasAsync();
        if (cameraResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        cameras = cameraResult;
    }

    private async Task GetLitterPerCameraAsync()
    {
        var litterResult = await _litterService.GetAmountPerLocationAsync();
        if (litterResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        foreach (var camera in litterResult)
        {
            var item = new TotalLitterPerCamera{
                Amount = camera.Glass + camera.Metal + camera.Organic + camera.Plastic + camera.Paper,
                Location = cameras.Find(c => c.Id == camera.CameraId)?.Location ?? "Onbekend"
            };
            totalLitterPerCamera.Add(item);
        }
    }
}