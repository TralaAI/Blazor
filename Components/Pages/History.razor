@page "/history"
@rendermode InteractiveServer
@using ApexCharts
@using Blazor.Models
@using Blazor.Interfaces
@using Blazor.Models.Enums
@using BlazorDateRangePicker
@inject ILitterService _litterService

<div class="page-container" style="height: 140vh;">
    <h1 class="geschiedenis titel">Afvalgeschiedenis</h1>
    <div style="display: flex; gap: 2rem; align-items: flex-start; flex-direction: row;">
        <div class="box-container" style="flex: 1; height: 440px; display: flex; flex-direction: column;">
            @if (cameras.Count == 0 || totalLitterPerCamera is null || totalLitterPerCamera.Count == 0)
            {
                <div class="loading-indicator"
                    style="font-size:2rem; padding:2rem; flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div class="spinner" style="width:48px; height:48px; border-width:8px;"></div>
                    <span style="font-size:2rem; margin-top:1rem; display:block;">Bezig met laden...</span>
                </div>
            }
            else
            {
                <ApexChart TItem="TotalLitterPerCamera" Title="Totaal gedetecteerd afval per camera." Height="400"
                    Options="options">
                    <ApexPointSeries TItem="TotalLitterPerCamera" Items="totalLitterPerCamera" SeriesType="SeriesType.Donut"
                        Name="Total Litter Per Camera" XValue="@(e => e.Location)" YValue="@(e => e.Amount)" />
                </ApexChart>
            }
        </div>
        <div class="box-container" style="flex: 1; height: 440px; display: flex; flex-direction: column;">
            @if (cameras.Count == 0 || totalLitterPerCamera is null || totalLitterPerCamera.Count == 0)
            {
                <div class="loading-indicator"
                    style="flex: 1; display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <div class="spinner"></div>
                    <span>Bezig met laden...</span>
                </div>
            }
            else
            {
                <ApexChart TItem="TotalPerDay" Title="Hoeveelheid afval per type per dag." Height="400">
                    <ApexPointSeries TItem="TotalPerDay" Items="totalPerDays" SeriesType="SeriesType.Heatmap" Name="Glas"
                        XValue="@(e => e.Day.ToString("dd-MM"))" YValue="@(e => e.Glass)" />
                    <ApexPointSeries TItem="TotalPerDay" Items="totalPerDays" SeriesType="SeriesType.Heatmap" Name="Metaal"
                        XValue="@(e => e.Day.ToString("dd-MM"))" YValue="@(e => e.Metal)" />
                    <ApexPointSeries TItem="TotalPerDay" Items="totalPerDays" SeriesType="SeriesType.Heatmap"
                        Name="Organisch" XValue="@(e => e.Day.ToString("dd-MM"))" YValue="@(e => e.Organic)" />
                    <ApexPointSeries TItem="TotalPerDay" Items="totalPerDays" SeriesType="SeriesType.Heatmap" Name="Papier"
                        XValue="@(e => e.Day.ToString("dd-MM"))" YValue="@(e => e.Paper)" />
                    <ApexPointSeries TItem="TotalPerDay" Items="totalPerDays" SeriesType="SeriesType.Heatmap" Name="Plastic"
                        XValue="@(e => e.Day.ToString("dd-MM"))" YValue="@(e => e.Plastic)" />
                </ApexChart>
            }
        </div>
    </div>
    <div class="insane-table-container">
        <h3>Recente afvaldetecties</h3>

        <DateRangePicker Culture="@(System.Globalization.CultureInfo.GetCultureInfo("nl-NL"))"
            OnRangeSelect="GetLitterAsync">
            <PickerTemplate>
                <div id="@context.Id" @onclick="context.Toggle"
                    style="background: #fff; cursor: pointer; padding: 5px 10px; width: 250px; border: 1px solid #ccc;">
                    <i class="oi oi-calendar"></i>&nbsp;
                    <span>@context.FormattedRange @(string.IsNullOrEmpty(context.FormattedRange) ? "Kies datums..." :
                                                "")</span>
                    <i class="oi oi-chevron-bottom float-right"></i>
                </div>
            </PickerTemplate>
        </DateRangePicker>

        @if (recentLitter.Count == 0)
        {
            <p>Er zijn momenteel geen recente afvaldetecties.</p>
        }
        else
        {
            <div class="table-scroll-container">
                <table class="insane-table">
                    @* TODO @BaasW Please make this scrollable! *@
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Type</th>
                            <th>Timestamp</th>
                            <th>Weather</th>
                            <th>Temperature</th>
                            <th>Location</th>
                            <th>IsHoliday</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var litter in recentLitter)
                        {
                            <tr>
                                <td>@litter.Id</td>
                                <td>
                                    <span class="type-badge type-@litter.LitterCategory.ToString().ToLower()">
                                        @litter.Type
                                    </span>
                                </td>
                                <td>@litter.TimeStamp.ToString("dd-MM-yyyy HH:mm")</td>
                                <td>
                                    <span class="weather-icon weather-@litter.Weather.ToString().ToLower()"></span>
                                    @litter.Weather
                                </td>
                                <td>
                                    <span class="temp-badge">@litter.Temperature&nbsp;Â°C</span>
                                </td>
                                <td>
                                    <span class="location-badge">
                                        @(cameras.FirstOrDefault(c => c.Id == litter.CameraId)?.Location ?? "Onbekend")
                                    </span>
                                </td>
                                <td>
                                    @if (litter.IsHoliday)
                                    {
                                        <span class="holiday-badge">Ja</span>
                                    }
                                    else
                                    {
                                        <span class="no-holiday-badge">Nee</span>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

<style>
    .box-container {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }

    .geschiedenis.titel {
        color: #6a5acd;
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 1rem;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
        font-weight: 700;
    }
</style>

@code {
    private class TotalLitterPerCamera
    {
        public required string Location { get; set; }
        public int Amount { get; set; }
    }

    private class TotalPerDay
    {
        public DateTime Day { get; set; }
        public int Glass { get; set; }
        public int Plastic { get; set; }
        public int Metal { get; set; }
        public int Organic { get; set; }
        public int Paper { get; set; }
    }

    private List<Camera> cameras = new();
    private List<Litter> recentLitter = new();
    private List<TotalPerDay> totalPerDays = new();
    private List<TotalLitterPerCamera> totalLitterPerCamera = new();
    private ApexChartOptions<TotalLitterPerCamera> options { get; set; } = new();

    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddDays(-5);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        await GetCamerasAsync();
        await GetLitterPerCameraAsync();

        options.PlotOptions = new PlotOptions
        {
            Pie = new PlotOptionsPie
            {
                Donut = new PlotOptionsDonut
                {
                    Labels = new DonutLabels
                    {
                        Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", Formatter = @"function (w)
{return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" }
                    }
                }
            }
        };
    }

    private async Task GetLitterAsync(DateRange range)
    {
        var filter = new LitterFilterDto { From = range.Start.DateTime, To = range.End.DateTime };
        var litterResult = await _litterService.GetLittersAsync(filter);
        if (litterResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }

        recentLitter = litterResult;

        totalPerDays = litterResult
        .GroupBy(l => l.TimeStamp.Date)
        .Select(g => new TotalPerDay
        {
            Day = g.Key,
            Glass = g.Count(x => x.LitterCategory == LitterCategory.Glass),
            Metal = g.Count(x => x.LitterCategory == LitterCategory.Metal),
            Organic = g.Count(x => x.LitterCategory == LitterCategory.Organic),
            Paper = g.Count(x => x.LitterCategory == LitterCategory.Paper),
            Plastic = g.Count(x => x.LitterCategory == LitterCategory.Plastic)
        })
        .OrderBy(x => x.Day)
        .ToList();

        StateHasChanged();
    }

    private async Task GetCamerasAsync()
    {
        var cameraResult = await _litterService.GetCamerasAsync();
        if (cameraResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        cameras = cameraResult;
    }

    private async Task GetLitterPerCameraAsync()
    {
        var litterResult = await _litterService.GetAmountPerLocationAsync();
        if (litterResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        foreach (var camera in litterResult)
        {
            var item = new TotalLitterPerCamera
            {
                Amount = camera.Glass + camera.Metal + camera.Organic + camera.Plastic + camera.Paper,
                Location = cameras.Find(c => c.Id == camera.CameraId)?.Location ?? "Onbekend"
            };
            totalLitterPerCamera.Add(item);
        }
    }
}