@page "/history"
@rendermode InteractiveServer
@using ApexCharts
@using Blazor.Models
@using Blazor.Interfaces
@inject ILitterService _litterService

<div class="page-container">
    <div>
        <div class="donut">
            @if (cameras.Count == 0 || totalLitterPerCamera is null || totalLitterPerCamera.Count == 0)
            {
                <div class="loading-indicator" style="font-size:2rem; padding:2rem;">
                    <div class="spinner" style="width:48px; height:48px; border-width:8px;"></div>
                    <span style="font-size:2rem; margin-top:1rem; display:block;">Bezig met laden...</span>
                </div>
            }
            else
            {
                <ApexChart TItem="TotalLitterPerCamera" Title="Totaal gedetecteerd afval per camera" Height="400"
                    Options="options">
                    <ApexPointSeries TItem="TotalLitterPerCamera" Items="totalLitterPerCamera" SeriesType="SeriesType.Donut"
                        Name="Total Litter Per Camera" XValue="@(e => e.Location)" YValue="@(e => e.Amount)" />
                </ApexChart>
            }

        </div>
        @* <div class="heatmap">
            @if (cameras.Count == 0 || totalLitterPerCamera is null || totalLitterPerCamera.Count == 0)
            {
                <div class="loading-indicator">
                    <div class="spinner"></div>
                    <span>Bezig met laden...</span>
                </div>
            }
            else
            {
                <ApexChart TItem="" Title="Incident Severity">

                    @foreach (var source in incidents.GroupBy(e => e.Source))
                    {
                        <ApexPointSeries TItem="SupportIncident" Items="source.OrderBy(e => e.WeekNumber)"
                            Name="@source.Key.ToString()" SeriesType="SeriesType.Heatmap" XValue="@(e => e.WeekName)"
                            YAggregate="@(e => (int)e.Average(a=>a.Severity))" />
                    }

                </ApexChart>
            }
        </div> *@
        <div class="recent-litter">
            <h3>Recente afvaldetecties</h3>
            @if (recentLitter.Count == 0)
            {
                <p>Er zijn momenteel geen recente afvaldetecties.</p>
            }
            else
            {
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Type</th>
                        <th>Timestamp</th>
                        <th>Confidence</th>
                        <th>Weather</th>
                        <th>Temperature</th>
                        <th>Location</th>
                        <th>IsHoliday</th>
                    </tr>
                </thead>
                <tbody>
                    @* @foreach (var litter in recentLitter)
                    {
                        <tr>
                            <td>@litter.Id</td>
                            <td>@litter.Type</td>
                            <td>@litter.TimeStamp.ToString("dd-MM-yyyy")</td>
                            <td>@litter.Confidence</td>
                            <td>@litter.Weather</td>
                            <td>@litter.Temperature</td>
                            <td>@litter.Location</td>
                            <td>@litter.IsHoliday</td>
                        </tr>
                    } *@
                </tbody>
            }
        </div>
    </div>
</div>

<style>
    .donut {
        flex: 3;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        padding: 1rem;
    }
</style>

@code {
    private class TotalLitterPerCamera
    {
        public required string Location { get; set; }
        public int Amount { get; set; }
    }

    private ApexChartOptions<TotalLitterPerCamera> options { get; set; } = new();
    private List<Camera> cameras = new();
    private List<Litter> recentLitter = new();
    private List<TotalLitterPerCamera> totalLitterPerCamera = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCamerasAsync();
        await GetLitterPerCameraAsync();
        @* await GetLatestLitterAsync(); *@

        options.PlotOptions = new PlotOptions
        {
            Pie = new PlotOptionsPie
            {
                Donut = new PlotOptionsDonut
                {
                    Labels = new DonutLabels
                    {
                        Total = new DonutLabelTotal { FontSize = "24px", Color = "#D807B8", Formatter = @"function (w)
{return w.globals.seriesTotals.reduce((a, b) => { return (a + b) }, 0)}" }
                    }
                }
            }
        };
    }

    private async Task GetLatestLitterAsync()
    {
        var litterResult = await _litterService.GetLatestLittersAsync(100);
        if (litterResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        recentLitter = litterResult;
    }
    private async Task GetCamerasAsync()
    {
        var cameraResult = await _litterService.GetCamerasAsync();
        if (cameraResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        cameras = cameraResult;
    }

    private async Task GetLitterPerCameraAsync()
    {
        var litterResult = await _litterService.GetAmountPerLocationAsync();
        if (litterResult is null)
        {
            @* GENIUS ERROR! *@
            return;
        }
        foreach (var camera in litterResult)
        {
            var item = new TotalLitterPerCamera
            {
                Amount = camera.Glass + camera.Metal + camera.Organic + camera.Plastic + camera.Paper,
                Location = cameras.Find(c => c.Id == camera.CameraId)?.Location ?? "Onbekend"
            };
            totalLitterPerCamera.Add(item);
        }
    }
}