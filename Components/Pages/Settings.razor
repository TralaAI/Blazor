@page "/settings"
@rendermode InteractiveServer
@using Blazor.Interfaces
@inject NavigationManager Navigation
@inject IHealthService _healthService
@inject ILitterService _litterService


<div class="wholeass" style="height: calc(100svh - 4rem)">
    <div class="settings-container">
        <!-- Blok 1: API Status -->
        <div class="settings-block">
            <h3>API Status</h3>
            <p><b>Een overzicht van alle API's die onze webapplicatie gebruikt</b></p>
            <table class="status-table" style="margin-bottom:0;">
                <tbody>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(backendStatus == null ? "status-loading" : (backendStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>.NET API</strong> <span class="text-muted">(Backend)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(backendStatus.HasValue ? (backendStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(pythonStatus == null ? "status-loading" : (pythonStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>FastAPI</strong> <span class="text-muted">(AI-Predictions)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(pythonStatus.HasValue ? (pythonStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(sensoringStatus == null ? "status-loading" : (sensoringStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Sensoring API</strong> <span class="text-muted">(Litter Recognition)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(sensoringStatus.HasValue ? (sensoringStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(holidayStatus == null ? "status-loading" : (holidayStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Holiday API</strong> <span class="text-muted">(Holiday Information)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(holidayStatus.HasValue ? (holidayStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(weatherStatus == null ? "status-loading" : (weatherStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Weather API</strong> <span class="text-muted">(Weather Forecasts)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(weatherStatus.HasValue ? (weatherStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>

        <!-- Blok 2: Model Info -->
        <div class="settings-block d-flex flex-column justify-content-between">
            <div>
                <h3>Sensoring AI-Model status</h3>
                <p><b>Bij opstart van de webapp wordt het model AI-Model opnieuw getraind. Via deze knop heb je ook de
                        mogelijkheid om dit handmatig te forceren indien er nieuwe data beschikbaar is.</b></p>
            </div>

            <div class="d-flex justify-content-between align-items-center mt-auto pt-3">
                <div>
                    <p class="mb-1"><strong>Response:</strong> <i>waiting...</i></p>
                    <p class="mb-1"><strong>Model Type:</strong> Random forest</p>
                    <p class="mb-0"><strong>Huidige RMSE:</strong> @modelRMSE</p>
                </div>
                <button @onclick="RetrainModel" class="btn btn-primary">Retrain Model</button>
            </div>
        </div>

    </div>
</div>

<style>
    .settings-block {
        flex: 1;
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .settings-block h3 {
        color: #0078d4;
        margin-bottom: 1rem;
    }

    table.status-table {
        width: 100%;
        border-collapse: collapse;
    }

    table.status-table td {
        padding: 0.5rem;
        vertical-align: middle;
    }

    .status-indicator {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        display: inline-block;
    }

    .status-green {
        background-color: limegreen;
    }

    .status-red {
        background-color: red;
    }

    .status-loading {
        background-color: grey;
        animation: pulse 1.5s infinite;
    }

    .retrain-button {
        background-color: #0078d4;
        color: white;
        border: none;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 0.25rem;
    }

    .model-info p {
        margin-top: 0.5rem;
        margin-bottom: 0;
    }


    .retrain-button:hover {
        background-color: #005fa3;
    }

    .info-text {
        margin-top: 0.75rem;
        font-size: 0.95rem;
        color: #333;
    }
</style>

@code {
    private bool? backendStatus, pythonStatus, sensoringStatus, weatherStatus, holidayStatus = null;
    private DateTime? lastModelUpdate = DateTime.Now.AddHours(-3);
    private double modelRMSE = 0.000;

    protected override void OnInitialized()
    {
        // Fire-and-forget API status check, don't await to avoid blocking page load
        _ = GetApiStatuses();
    }

    private async Task GetApiStatuses()
    {
        // Start all health checks in parallel
        var backendTask = _healthService.GetBackendHealthAsync();
        var fastApiTask = _healthService.GetFastApiHealthAsync();
        var sensoringTask = _healthService.GetSensoringHealthAsync();
        var weatherTask = _healthService.GetWeatherApiHealthAsync();
        var holidayTask = _healthService.GetHolidayApiHealthAsync();

        // Stream in each result as soon as it completes
        var tasks = new[]
        {
(Task: backendTask, Setter: (Action<bool?>)(v => { backendStatus = v; })),
(Task: fastApiTask, Setter: (Action<bool?>)(v => { pythonStatus = v; })),
(Task: sensoringTask, Setter: (Action<bool?>)(v => { sensoringStatus = v; })),
(Task: weatherTask, Setter: (Action<bool?>)(v => { weatherStatus = v; })),
(Task: holidayTask, Setter: (Action<bool?>)(v => { holidayStatus = v; }))
};

        var remaining = tasks.ToList();

        while (remaining.Count > 0)
        {
            var completed = await Task.WhenAny(remaining.Select(t => t.Task));
            var tuple = remaining.First(t => t.Task == completed);

            try
            {
                tuple.Setter(completed.Result);
            }
            catch
            {
                tuple.Setter(false);
            }

            await InvokeAsync(StateHasChanged);
            remaining.Remove(tuple);
        }
    }

    private async Task RetrainModel()
    {
        var result = await _litterService.RetrainModelAsync();
        /* TODO @BaasW @DanielvG-IT
        Geeft op dit moment alleen een boolean terug dat het gelukt is,
        maar zou ook de RMSE moeten teruggeven en de laatste update tijd en mogelijk ook het model type.
        */
    }
}
