@page "/settings"
@rendermode InteractiveServer
@using Blazor.Components.Shared
@using Blazor.Interfaces
@using Blazor.Models
@inject NavigationManager Navigation
@inject IHealthService _healthService
@inject ILitterService _litterService

<ErrorModal Title="Oops!" Message="@errorMessage" Show="@showErrorModal" OnClose="@HandleModalClose" />

<div class="wholeass" style="height: calc(100svh - 4rem)">
    <div class="settings-container">
        <!-- Blok 1: API Status -->
        <div class="settings-block">
            <h3>API Status</h3>
            <p><b>Een overzicht van alle API's die onze webapplicatie gebruikt</b></p>
            <table class="status-table" style="margin-bottom:0;">
                <tbody>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(backendStatus == null ? "status-loading" : (backendStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>.NET API</strong> <span class="text-muted">(Backend)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(backendStatus.HasValue ? (backendStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(pythonStatus == null ? "status-loading" : (pythonStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>FastAPI</strong> <span class="text-muted">(AI-Predictions)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(pythonStatus.HasValue ? (pythonStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(sensoringStatus == null ? "status-loading" : (sensoringStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Sensoring API</strong> <span class="text-muted">(Litter Recognition)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(sensoringStatus.HasValue ? (sensoringStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(holidayStatus == null ? "status-loading" : (holidayStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Holiday API</strong> <span class="text-muted">(Holiday Information)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(holidayStatus.HasValue ? (holidayStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                    <tr style="height:32px;">
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <span
                                class="status-indicator @(weatherStatus == null ? "status-loading" : (weatherStatus.Value ? "status-green" : "status-red"))"></span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            <strong>Weather API</strong> <span class="text-muted">(Weather Forecasts)</span>
                        </td>
                        <td style="padding-top:0.25rem; padding-bottom:0.25rem;">
                            @(weatherStatus.HasValue ? (weatherStatus.Value ? "Online" : "Offline") : "Loading...")
                        </td>
                    </tr>
                </tbody>
            </table>

        </div>
        <!-- Blok 2: AI-Model Informatie & Acties -->
        <div class="settings-block d-flex flex-column justify-content-between">
            <div>
                <h3>AI-Model Beheer</h3>
                <p>
                    <b>Bekijk de status van de AI-model(len) gekoppeld aan jouw cameras. Bij opstart van de webapp
                        worden de modellen automatisch opnieuw getraind op de meest actuele data, maar dit kan ook
                        handmatig.
                        Selecteer eerst een locatie om het juiste model te beheren.</b>
                </p>
                <div class="d-flex align-items-center mb-3" style="gap: 0.75rem;">
                    <label for="cameraSelect" class="mb-0"><strong>Locatie:</strong></label>
                    <select id="cameraSelect" @bind="selectedCameraId" @bind:after="OnCameraChanged" class="form-select"
                        style="width: 220px;">
                        @foreach (var camera in cameras)
                        {
                            <option value="@camera.Id">@camera.Location</option>
                        }
                    </select>
                </div>
            </div>
            <div class="d-flex justify-content-between align-items-start mt-auto pt-3 modern-model-status enhanced-model-status"
                style="gap: 4rem;">
                <div class="settings-block model-status-card shadow-lg"
                    style="min-width: 340px; border: 1px solid #e0e7ef; background: linear-gradient(135deg, #f8fbff 0%, #eaf1fb 100%);">
                    <div class="model-status-row mb-3">
                        <span class="model-status-label"><strong>Status:</strong></span>
                        @if (latestResponse is null)
                        {
                            <span class="skeleton skeleton-text w-50 ms-2"></span>
                        }
                        else
                        {
                            <span class="model-status-value ms-2"><i>@latestResponse</i></span>
                        }
                    </div>
                    <div class="model-status-row mb-3">
                        <span class="model-status-label"><strong>Modeltype:</strong></span>
                        @if (latestResponse is null)
                        {
                            <span class="skeleton skeleton-text w-50 ms-2"></span>
                        }
                        else
                        {
                            <span class="model-status-value ms-2">Random forest</span>
                        }
                    </div>
                    <div class="model-status-row mb-3">
                        <span class="model-status-label"><strong>Huidige RMSE:</strong></span>
                        @if (modelRMSE is null)
                        {
                            <span class="skeleton skeleton-text w-50 ms-2"></span>
                        }
                        else
                        {
                            <span class="model-status-value ms-2">@modelRMSE</span>
                        }
                    </div>
                    <div class="model-status-row mb-3">
                        <span class="model-status-label"><strong>Locatie:</strong></span>
                        @if (modelRMSE is null)
                        {
                            <span class="skeleton skeleton-text w-50 ms-2"></span>
                        }
                        else
                        {
                            <span class="model-status-value ms-2">@location</span>
                        }
                    </div>
                    <div class="model-status-row">
                        <span class="model-status-label"><strong>Laatst bijgewerkt:</strong></span>
                        @if (lastModelUpdate is null)
                        {
                            <span class="skeleton skeleton-text w-50 ms-2"></span>
                        }
                        else
                        {
                            <span class="model-status-value ms-2">@lastModelUpdate.Value.ToString("g")</span>
                        }
                    </div>
                </div>
                <div class="retrain-btn-container d-flex flex-column align-items-end" style="min-width: 260px;">
                    <button @onclick="RetrainButton" class="retrain-button-modern enhanced-retrain-btn"
                        disabled="@isRetraining"
                        style="width: 100%; box-shadow: 0 2px 8px rgba(0,123,212,0.10); font-size: 1.08rem; padding: 1rem 0;">
                        @if (isRetraining)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="ms-2">Model wordt opnieuw getraind...</span>
                        }
                        else
                        {
                            <span class="material-icons align-middle ms-2 autorenew"
                                style="vertical-align: middle; font-size: 1.3rem;">
                            </span>
                            <span class="ms-2">Model opnieuw trainen</span>
                        }
                    </button>
                    @if (showRetrainSuccess)
                    {
                        <div class="retrain-success mt-3 p-2 px-3 rounded-3 d-flex align-items-center"
                            style="background: #e6f9ed; border: 1px solid #b6e7d6;">
                            <span class="ms-2 text-success fw-semibold">Model succesvol opnieuw getraind!</span>
                        </div>
                    }
                </div>
            </div>

            <style>
                .enhanced-model-status {
                    background: transparent;
                    border-radius: 16px;
                    padding: 1.5rem 0 0.5rem 0;
                }

                .model-status-card {
                    border-radius: 16px;
                    transition: box-shadow 0.2s;
                }

                .model-status-card:hover {
                    box-shadow: 0 4px 16px rgba(0, 123, 212, 0.13);
                }

                .model-status-row {
                    display: flex;
                    align-items: center;
                    font-size: 1.07rem;
                    padding: 0.25rem 0;
                }

                .model-status-label {
                    min-width: 120px;
                    color: #0078d4;
                    font-weight: 500;
                    letter-spacing: 0.01em;
                }

                .model-status-value {
                    color: #222;
                    font-weight: 500;
                    font-family: 'Segoe UI', Arial, sans-serif;
                }

                .enhanced-retrain-btn {
                    background: linear-gradient(90deg, #0078d4 0%, #005fa3 100%);
                    color: #fff;
                    border: none;
                    border-radius: 10px;
                    transition: background 0.2s, box-shadow 0.2s;
                    font-weight: 600;
                    letter-spacing: 0.01em;
                }

                .enhanced-retrain-btn:disabled,
                .enhanced-retrain-btn[disabled] {
                    background: #b3cbe6;
                    color: #f8f9fa;
                    cursor: not-allowed;
                    opacity: 0.85;
                }

                .enhanced-retrain-btn:hover:not(:disabled) {
                    background: linear-gradient(90deg, #005fa3 0%, #0078d4 100%);
                    box-shadow: 0 4px 16px rgba(0, 123, 212, 0.18);
                }

                .retrain-success {
                    font-size: 1rem;
                    background: #e6f9ed;
                    border: 1px solid #b6e7d6;
                    color: #1e824c;
                    font-weight: 500;
                    box-shadow: 0 1px 4px rgba(30, 130, 76, 0.06);
                }
            </style>
        </div>
    </div>
</div>

<style>
    .settings-block {
        flex: 1;
        background-color: #ffffff;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
    }

    .settings-block h3 {
        color: #0078d4;
        margin-bottom: 1rem;
    }

    table.status-table {
        width: 100%;
        border-collapse: collapse;
    }

    table.status-table td {
        padding: 0.5rem;
        vertical-align: middle;
    }

    .status-indicator {
        width: 15px;
        height: 15px;
        border-radius: 50%;
        display: inline-block;
    }

    .status-green {
        background-color: limegreen;
    }

    .status-red {
        background-color: red;
    }

    .status-loading {
        background-color: grey;
        animation: pulse 1.5s infinite;
    }

    .retrain-button {
        background-color: #0078d4;
        color: white;
        border: none;
        padding: 0.75rem 1.25rem;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 0.25rem;
    }

    .model-info p {
        margin-top: 0.5rem;
        margin-bottom: 0;
    }


    .retrain-button:hover {
        background-color: #005fa3;
    }

    .info-text {
        margin-top: 0.75rem;
        font-size: 0.95rem;
        color: #333;
    }
</style>

@code {
    private bool? backendStatus, pythonStatus, sensoringStatus, weatherStatus, holidayStatus = null;
    private string? errorMessage = string.Empty;
    private string? latestResponse = null!;
    private DateTime? lastModelUpdate = null!;
    private double? modelRMSE = null!;
    private bool isRetraining = false;
    private bool showRetrainSuccess = false;
    private string location = string.Empty;
    private List<Camera> cameras = new();
    private int selectedCameraId = 2;
    private bool showErrorModal = false;

    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _initialized = true;

            try
            {
                var response = await _litterService.GetCamerasAsync();
                if (response is not null)
                {
                    cameras = response;
                }
            }
            catch (Exception ex)
            {
                ShowError("Kon camera's niet ophalen: " + ex.Message);
            }

            // Fire-and-forget API status check, don't await to avoid blocking page load
            _ = GetApiStatuses();
            _ = GetModelStatus(selectedCameraId);

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task GetApiStatuses()
    {
        var backendTask = _healthService.GetBackendHealthAsync();
        var fastApiTask = _healthService.GetFastApiHealthAsync();
        var sensoringTask = _healthService.GetSensoringHealthAsync();
        var weatherTask = _healthService.GetWeatherApiHealthAsync();
        var holidayTask = _healthService.GetHolidayApiHealthAsync();

        var tasks = new[]
        {
(Task: backendTask, Setter: (Action<bool?>)(v => { backendStatus = v; })),
(Task: fastApiTask, Setter: (Action<bool?>)(v => { pythonStatus = v; })),
(Task: sensoringTask, Setter: (Action<bool?>)(v => { sensoringStatus = v; })),
(Task: weatherTask, Setter: (Action<bool?>)(v => { weatherStatus = v; })),
(Task: holidayTask, Setter: (Action<bool?>)(v => { holidayStatus = v; }))
};

        var remaining = tasks.ToList();

        while (remaining.Count > 0)
        {
            var completed = await Task.WhenAny(remaining.Select(t => t.Task));
            var tuple = remaining.First(t => t.Task == completed);

            try
            {
                tuple.Setter(completed.Result);
            }
            catch (Exception ex)
            {
                tuple.Setter(false);
                ShowError("Fout bij ophalen API status: " + ex.Message);
            }

            await InvokeAsync(StateHasChanged);
            remaining.Remove(tuple);
        }
    }

    private async Task RetrainButton()
    {
        isRetraining = true;
        showRetrainSuccess = false;
        try
        {
            if (selectedCameraId == 2) // HardCode Sensoring group
            {
                var importResult = await _litterService.ImportTrashDataAsync();
                if (!importResult)
                {
                    ShowError("Importeren van trash data is mislukt.");
                }
            }

            var retrainResult = await _litterService.RetrainModelAsync(selectedCameraId);
            if (!retrainResult)
            {
                ShowError("Het opnieuw trainen van het model is mislukt.");
            }
            else
            {
                showRetrainSuccess = true;
            }
        }
        catch (Exception ex)
        {
            ShowError("Fout bij opnieuw trainen van model: " + ex.Message);
        }
        finally
        {
            isRetraining = false;
            await GetModelStatus(selectedCameraId);
        }
    }

    private async Task OnCameraChanged()
    {
        await GetModelStatus(selectedCameraId);
    }

    private async Task GetModelStatus(int cameraId)
    {
        try
        {
            var result = await _healthService.GetFastApiModelDataAsync(cameraId);
            if (result is null)
            {
                latestResponse = "Er is iets foutgegaan";
                modelRMSE = 0;
                location = "unknown";
                lastModelUpdate = DateTime.Now;
                ShowError("Kon modelstatus niet ophalen.");
                return;
            }

            latestResponse = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(result.Status ?? string.Empty);
            modelRMSE = Math.Round(result.CurrentRmse, 3);
            lastModelUpdate = result.LastUpdated;
            location = cameras.FirstOrDefault(c => c.Id == selectedCameraId)?.Location ?? string.Empty;
        }
        catch (Exception ex)
        {
            ShowError("Fout bij ophalen modelstatus: " + ex.Message);
        }

        await InvokeAsync(StateHasChanged);
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        showErrorModal = true;
        StateHasChanged();
    }

    private void HandleModalClose()
    {
        showErrorModal = false;
        errorMessage = string.Empty;
        StateHasChanged();
    }
}